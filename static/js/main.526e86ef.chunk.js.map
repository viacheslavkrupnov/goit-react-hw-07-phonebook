{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactsList/ContactsList.module.css","components/Filter/Filter.module.css","components/Section/Section.module.css","components/Container/Container.module.css","redux/actions.js","redux/operations.js","redux/selectors.js","components/ContactForm/ContactForm.js","components/ContactsList/ContactsList.js","components/Filter/Filter.js","components/Container/Container.js","components/Section/Section.js","App.js","redux/reducers.js","redux/store.js","index.js"],"names":["module","exports","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","axios","defaults","baseURL","contactsOperations","fetchContacts","dispatch","a","get","data","addContact","name","number","contact","post","deleteContact","id","delete","getContacts","state","contacts","items","getFilter","filter","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","includes","getFiteredContacts","ContactForm","useState","setName","setNumber","contactNameId","shortid","generate","contactNumberId","useDispatch","useSelector","handleInputForm","event","target","value","toast","error","resetForm","className","s","form","onSubmit","preventDefault","find","htmlFor","input","type","pattern","title","placeholder","onChange","button","ContactsList","useEffect","length","list","map","onClick","onRemove","protoTypes","PropTypes","arrayOf","shape","string","isRequired","func","Filter","label","e","contactsActions","Container","children","container","Section","section","App","autoClose","createReducer","_","payload","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contactsReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.526e86ef.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"ContactForm_button__1MLZK\",\"form\":\"ContactForm_form__1fuOn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactsList_list__2RiYd\",\"contacts\":\"ContactsList_contacts__1CdsV\",\"button\":\"ContactsList_button__2RjNg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__3DcZT\",\"filter\":\"Filter_filter__1E5tH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__Ap5Zy\",\"title\":\"Section_title__2S6oE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cotainer\":\"Container_cotainer__1k7pl\"};","import { createAction } from '@reduxjs/toolkit';\n\nexport const fetchContactsRequest = createAction(\n  'contacts/fetchContactsRequest',\n);\nexport const fetchContactsSuccess = createAction(\n  'contacts/fetchContactsSuccess',\n);\nexport const fetchContactsError = createAction('contacts/fetchContactsError');\n\nexport const addContactRequest = createAction('contacts/addContactRequest');\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\nexport const addContactError = createAction('contacts/addContactError');\n\nexport const deleteContactRequest = createAction(\n  'contacts/deleteContactRequest',\n);\nexport const deleteContactSuccess = createAction(\n  'contacts/deleteContactSuccess',\n);\nexport const deleteContactError = createAction('contacts/deleteContactError');\n\nexport const changeFilter = createAction('contacts/changeFilter');\n","import axios from 'axios';\nimport {\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n} from './actions';\n// import { createAsyncThunk } from '@reduxjs/toolkit';\n\naxios.defaults.baseURL = 'http://localhost:3000';\n\nconst fetchContacts = () => async dispatch => {\n  dispatch(fetchContactsRequest());\n  try {\n    const { data } = await axios.get('/contacts');\n    dispatch(fetchContactsSuccess(data));\n  } catch (error) {\n    dispatch(fetchContactsError(error));\n  }\n};\n\n// const fetchContacts = createAsyncThunk('contacts/fetchContacts', async () => {\n//   const { data } = await axios.get('/contacts');\n//   return data;\n// });\n\nconst addContact = (name, number) => async dispatch => {\n  const contact = {\n    name,\n    number,\n  };\n\n  dispatch(addContactRequest());\n  \n  try {\n    const { data } = await axios.post('/contacts', contact);\n    dispatch(addContactSuccess(data));\n  } catch (error) {\n    dispatch(addContactError(error));\n  }\n};\n\n// const addContact = createAsyncThunk(\n//   ‘contacts/addContact’,\n//   async (name, number) => {\n//     const contact = {\n//       name,\n//       number,\n//     };\n//     const { data } = await axios.post(‘/contacts’, contact);\n//     return data;\n//   },\n// );\n\nconst deleteContact = id => async dispatch => {\n  dispatch(deleteContactRequest());\n  try {\n    await axios.delete(`/contacts/${id}`);\n    dispatch(deleteContactSuccess(id));\n  } catch (error) {\n    dispatch(deleteContactError(error));\n  }\n};\n\n// const deleteContact = createAsyncThunk(‘contacts/deleteContact’, async id => {\n//   await axios.delete(`/contacts/${id}`);\n// });\n\nconst contactsOperations = {\n  fetchContacts,\n  addContact,\n  deleteContact,\n};\nexport default contactsOperations;","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.contacts.filter;\n\nexport const getVisibleContacts = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) => {\n    const getFiteredContacts = contacts => {\n      const normalizedFilter = filter.toLowerCase();\n      return contacts.filter(items =>\n        items.name.toLowerCase().includes(normalizedFilter),\n      );\n    };\n\n    return getFiteredContacts(contacts);\n  },\n);\n","import { useState } from 'react';\nimport shortid from 'shortid';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport s from './ContactForm.module.css';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport contactsOperations from 'redux/operations';\nimport { getContacts } from 'redux/selectors';\n\n\nfunction ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const contactNameId = shortid.generate();\n  const contactNumberId = shortid.generate();\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n\n  const handleInputForm = event => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        toast.error(`There are no type input \"${name}\"`);\n    }\n  };\n\n  const handleFormSubmit = event => {\n    event.preventDefault();\n\n    if (contacts.find(contact => contact.name === name)) {\n      toast.error(`${name} Contact already exists`);\n      resetForm();\n      return;\n    }\n\n    if (name === '') {\n      return toast.error('Please enter contact name');\n    }\n\n    if (number === '') {\n      return toast.error('Please enter contact number');\n    }\n\n    dispatch(contactsOperations.addContact(name, number));\n    resetForm();\n  };\n\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={s.form} onSubmit={handleFormSubmit}>\n      <label htmlFor={contactNameId}>\n        <input\n          className={s.input}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          placeholder=\"Enter name\"\n          value={name}\n          onChange={handleInputForm}\n          id={contactNameId}\n        />\n      </label>\n      <label htmlFor={contactNumberId}>\n        <input\n          className={s.input}\n          type=\"tell\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          placeholder=\"Enter phone number\"\n          value={number}\n          onChange={handleInputForm}\n          id={contactNumberId}\n        />\n      </label>\n\n      <button className={s.button} type=\"submit\">\n        {' '}\n        Add Contact{' '}\n      </button>\n    </form>\n  );\n}\n\nexport default ContactForm;\n","import PropTypes from 'prop-types';\nimport s from './ContactsList.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport contactsOperations from 'redux/operations';\nimport { getVisibleContacts } from 'redux/selectors';\nimport { useEffect } from 'react';\n\nconst ContactsList = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(contactsOperations.fetchContacts());\n  }, [dispatch]);\n\n  const contacts = useSelector(getVisibleContacts);\n\n  const onRemove = id => dispatch(contactsOperations.deleteContact(id));\n\n  if (contacts.length === 0) return null;\n  return (\n    <div className={s.contacts}>\n      <ul className={s.list}>\n        {contacts.map(({ id, name, number }) => (\n          <li key={id}>\n            <p>\n              {name}: {number}\n            </p>\n            <button\n              className={s.button}\n              type=\"button\"\n              onClick={() => onRemove(id)}\n            >\n              delete\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nContactsList.protoTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n  onRemove: PropTypes.func.isRequired,\n};\n\nexport default ContactsList;\n","import PropTypes from 'prop-types';\nimport s from './Filter.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getFilter } from 'redux/selectors';\nimport * as contactsActions from 'redux/actions';\n\nconst Filter = () => {\n  const value = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <label className={s.label}>\n      Find contacts by name\n      <input\n        className={s.input}\n        type=\"text\"\n        name=\"filter\"\n        value={value}\n        onChange={e => dispatch(contactsActions.changeFilter(e.target.value))}\n        placeholder=\"Enter name for Search\"\n      />\n    </label>\n  );\n};\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\n\nexport default Filter;\n","import propTypes from 'prop-types';\nimport s from './Container.module.css';\n\nfunction Container({ children }) {\n  return <div className={s.container}>{children}</div>;\n}\n\nContainer.propTypes = {\n  children: propTypes.node.isRequired,\n};\n\nexport default Container;\n","import PropTypes from 'prop-types';\nimport s from './Section.module.css';\n\nfunction Section({ title, children }) {\n  return (\n    <section className={s.section}>\n      <h2 className={s.title}>{title}</h2>\n      {children}\n    </section>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node,\n};\n\nexport default Section;\n","import { ToastContainer } from 'react-toastify';\nimport ContactForm from './components/ContactForm';\nimport ContactsList from './components/ContactsList';\nimport Filter from './components/Filter';\nimport Container from './components/Container';\nimport Section from './components/Section';\n\nfunction App() {\n  return (\n    <Container>\n      <Section title=\"Phonebook\">\n        <ContactForm />\n      </Section>\n      <Section title=\"Contacts\">\n        <Filter />\n        <ContactsList />\n        <ToastContainer autoClose={3000} />\n      </Section>\n    </Container>\n  );\n}\n\nexport default App;\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport {\n  addContactSuccess,\n  deleteContactSuccess,\n  changeFilter,\n  fetchContactsSuccess,\n} from './actions';\n\nconst items = createReducer([], {\n  [fetchContactsSuccess]: (_, { payload }) => payload,\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\n  [deleteContactSuccess]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filter = createReducer('', {\n  [changeFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n});\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport {\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport logger from 'redux-logger';\nimport contactsReducer from './reducers';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nconst store = configureStore({\n  reducer: {\n    contacts: contactsReducer,\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\n// const persistor = persistStore(store);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\n// import { PersistGate } from 'redux-persist/integration/react';\nimport store from './redux/store';\n\n// console.log(store);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={persistor}> */}\n      <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}